package MateAcademy.DailyTask;

public class JumpingNumber {
    public static String isJumping(int number) {
        String s = String.valueOf(number);

        for (int i = 0; i < s.length(); i++) {
            char currentDigit = s.charAt(i);
            char previosDigit = s.charAt(i - 1);
            int difference = Math.abs(currentDigit - previosDigit);
            if (difference != 1) {
                return "Not!!";
            }
        }
        return "Jumping!!";
    }
}

/*
Ми починаємо з перетворення числа number на рядок s за допомогою String.valueOf(number). Це дозволяє нам отримати окремі цифри числа для подальшої перевірки.

Потім ми починаємо ітерацію по рядку s за допомогою циклу for. Кожна ітерація виконується для однієї цифри числа.

У внутрішньому блоку циклу ми отримуємо поточну цифру currentDigit за допомогою s.charAt(i), де i - індекс поточної ітерації.

Далі, ми отримуємо попередню цифру previousDigit за допомогою s.charAt(i - 1). Примітка: для першої цифри, попередньою є неіснуючий символ '\0'. Це дозволяє нам порівнювати поточну цифру з попередньою.

Ми обчислюємо різницю між currentDigit та previousDigit за допомогою Math.abs(currentDigit - previousDigit). Використання Math.abs() дозволяє нам отримати абсолютне значення різниці, незалежно від того, яка цифра більша.

Перевіряємо, чи різниця не дорівнює 1. Якщо так, це означає, що цифри не відрізняються від сусідніх на 1, і ми повертаємо рядок "Not!!". Це означає, що число не задовольняє умови "Jumping".

Якщо всі перевірки успішні і ми дійшли до кінця циклу, це означає, що всі цифри задовольняють умову "Jumping", і ми повертаємо рядок "Jumping!!".

Таким чином, цей код ітерується по цифрах числа та перевіряє, чи вони відрізняються від сусідніх на 1. Якщо всі цифри задовольняють цю умову, то повертається "Jumping!!". Якщо ж хоча б одна цифра не відповідає умові, повертається "Not!!".
 */